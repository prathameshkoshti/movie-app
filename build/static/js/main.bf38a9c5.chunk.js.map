{"version":3,"sources":["components/Navbar.js","components/Searchbar.js","components/MovieItem.js","components/MoviesGrid.js","components/Movie.js","components/Login.js","components/Footer.js","MovieApp.js","serviceWorker.js","index.js"],"names":["Navbar","id","src","alt","localStorage","getItem","className","onClick","this","props","logout","Component","Searchbar","generateURL","bind","searchKey","document","getElementById","value","trim","url","search","lists","Array","from","searchHistory","map","history","i","key","type","list","Movie","fetchMovieDetails","movieId","displayMovieDetails","render","movie","imdbID","width","height","Poster","Title","Year","React","MoviesGrid","moviesGrid","movies","results","Rated","Production","Runtime","Genre","Released","Country","Language","Plot","Director","Actors","Writer","BoxOffice","Awards","class","href","target","imdbRating","Metascore","Login","querySelector","classList","remove","flag","usernameTextField","username","fetch","then","data","json","result","forEach","user","userName","setItem","firstName","lastName","window","location","reload","console","log","setTimeout","add","onChange","handleChange","placeholder","handleLogin","Footer","role","aria-label","MovieApp","clear","Response","setState","Search","movieList","catch","error","historyArray","split","push","uniqueKeywords","Set","join","state","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bf38a9c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <nav>\n                <span id=\"logo\">\n                    <img src={process.env.PUBLIC_URL + '/logo.png'} alt=\"logo\"></img>\n                </span>\n                {localStorage.getItem('username') ? <span className=\"welcome\">Welcome, {localStorage.getItem('firstName')} {localStorage.getItem('lastName')}</span> : ''}\n\n                {localStorage.getItem('username') ? <button onClick={this.props.logout}>Logout</button> : ''}\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react'\n\nclass Searchbar extends Component {\n\n    constructor() {\n        super();\n        this.generateURL = this.generateURL.bind(this);\n    }\n\n    generateURL() {\n        let searchKey = document.getElementById('search_input').value.trim();\n        let url = `http://www.omdbapi.com/?s=${searchKey}&apikey=32b7125b&type=movie`;\n        this.props.search(url, searchKey);\n    }\n\n    render() {\n        let lists = Array.from(this.props.searchHistory).map((history, i) => {\n            return <option key={i}>{history}</option>\n        })\n        return (\n            <div className=\"search_container\">\n                <input type='search' id=\"search_input\" list=\"search_history\" />\n                <button onClick={this.generateURL}>Search</button>\n                <datalist id=\"search_history\">\n                    {lists}\n                </datalist>\n            </div>\n        )\n    }\n}\n\nexport default Searchbar;","import React from 'react';\n\nclass Movie extends React.Component {\n    fetchMovieDetails = (movieId) => {\n        let url = `http://www.omdbapi.com/?i=${movieId}&apikey=32b7125b`\n        this.props.displayMovieDetails(url);\n    }\n    render = () => {\n        return (\n            <div className=\"movie\" onClick={this.fetchMovieDetails.bind(this, this.props.movie.imdbID)}>\n                <div className=\"poster\">\n                    <img width=\"250px\" height=\"374px\" src={this.props.movie.Poster} alt={this.props.movie.Title} />\n                </div>\n                <div className=\"movies_details\">\n                    <h4>{this.props.movie.Title}</h4>\n                    <span className=\"year\">{this.props.movie.Year}</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport Movie from './MovieItem';\n\nclass MoviesGrid extends Component {\n    render() {\n\n        let moviesGrid = Array.from(this.props.movies).map((movie, i) => {\n            return <Movie key={i} movie={movie} displayMovieDetails={this.props.displayMovieDetails} />\n        });\n\n        return (\n            <div className=\"movies_container\">\n                <span className=\"search_query\">{this.props.results}<strong>{this.props.searchKey}</strong></span>\n                <div className=\"movie_grid\">\n                    {moviesGrid}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MoviesGrid;","import React, { Component } from 'react'\n\nexport default class Movie extends Component {\n    render() {\n        return (\n            <div className=\"movies_container\">\n                <div className=\"movie_details_grid\">\n                    <div className=\"poster\">\n                        <img src={this.props.movie.Poster} width=\"250px\" alt={this.props.movie.Title} />\n                        \n                    </div>\n                    <div className=\"movie_data\">\n                        <h2>\n                            {this.props.movie.Title}\n                            <em className=\"year\">&nbsp;({this.props.movie.Year})&nbsp;</em>\n                            <span className=\"rated\">{this.props.movie.Rated}</span>\n                        </h2>\n                        <div className=\"dataset-1\">\n                            <span className=\"production\">{this.props.movie.Production}</span><span>|</span> \n                            <span className=\"runtime\">{this.props.movie.Runtime}</span><span>|</span>\n                            <span className=\"genre\">{this.props.movie.Genre}</span><span>|</span>\n                            <span>{this.props.movie.Released} ({this.props.movie.Country})</span>\n                        </div>\n                        <span className=\"language\">\n                            <em>{this.props.movie.Language}</em>\n                        </span>\n                        <div className=\"plot\">\n                            {this.props.movie.Plot}\n                        </div>\n                        <div className=\"dataset-2\">\n                            <span>Director</span>\n                            <strong className=\"director\">{this.props.movie.Director}</strong>\n                            <span>Stars</span>\n                            <strong className=\"stars\">{this.props.movie.Actors}</strong>\n                            <span>Writers</span>\n                            <span className=\"writers\">{this.props.movie.Writer}</span>\n                            <span>Box Office</span>\n                            <strong className=\"box_office\">{this.props.movie.BoxOffice}</strong>                            \n                            <span>Awards</span>\n                            <strong className=\"awards\">{this.props.movie.Awards}</strong>\n                            <span>\n                                Ratings\n                            </span>\n                            <span className=\"ratings\">\n                                <span className=\"imdb\">\n                                    <i class=\"fab fa-imdb fa-lg\"></i>&nbsp;\n                                    <a href={`https://www.imdb.com/title/${this.props.movie.imdbID}/`} target=\"_blank\">{this.props.movie.imdbRating}</a>&nbsp;\n                                </span>\n                                &nbsp;\n                                <span>Metacritic:</span>\n                                <span className=\"metaCritic\">\n                                    {this.props.movie.Metascore}\n                                </span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                {/* {JSON.stringify(this.props.movie)} */}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Login extends Component {\n\n    handleChange() {\n        let usernameTextField = document.querySelector('#username');\n        usernameTextField.classList.remove('error')\n    }\n\n    handleLogin() {\n        let flag = false;\n        let usernameTextField = document.querySelector('#username');\n        let username = usernameTextField.value.trim();\n        if(username !== '') {\n            let url = 'https://raw.githubusercontent.com/prathameshkoshti/users/master/db.json';\n            fetch(url)\n                .then(data => data.json())\n                .then(result => {\n                    result.forEach(user => {\n                        if (user.userName === username) {\n                            localStorage.setItem('username', username);\n                            localStorage.setItem('firstName', user.firstName);\n                            localStorage.setItem('lastName', user.lastName);\n                            flag = true;\n                            window.location.reload();\n                        }\n                        else {\n                            console.log('error while logging in!')\n                            flag = false;\n                        }\n                    })\n                    if(flag === false)\n                        setTimeout(() => usernameTextField.classList.add('error'), 1500)\n                })\n        }\n        else {\n            usernameTextField.classList.add('error');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"login_container\">\n                <div className=\"login_form\">\n                    <h3>Login</h3>\n                    <p>Type your username to login</p>\n                    <input type=\"text\" onChange={this.handleChange} id=\"username\" placeholder=\"username\" />\n                    <span className=\"error_message\">Please ensure your username is proper!</span>\n                    <button onClick={this.handleLogin.bind(this)}>Log In</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <span>\n                    Made with <span role=\"img\" aria-label=\"heart\">🖤</span> by Prathamesh Koshti.\n                </span>\n                <span>\n                    All rights reserved. \n                </span>\n            </footer>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport MoviesGrid from './components/MoviesGrid';\nimport Movie from './components/Movie';\nimport Login from './components/Login';\nimport Footer from './components/Footer';\n\nclass MovieApp extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      movies: '',\n      movieList: true\n    }\n  }\n\n  logout = () => {\n    //clears login data to logout the user.\n    localStorage.clear();\n    window.location.reload();\n  }\n\n  search = (url, searchKey) => {\n    fetch(url)\n      .then(data => data.json())\n      .then(result => {\n        if (result.Response === 'True')\n          this.setState({\n            movies: result.Search,\n            result: `You searched for `,\n            searchKey: searchKey,\n            movieList: true\n          });\n        else\n          this.setState({\n            result: `No results found for keyword `,\n            searchKey: searchKey,\n          });\n      })\n      .catch(error => console.log(error));\n\n    if (localStorage.getItem('history') !== null && searchKey !== '') {\n      let historyArray = localStorage.getItem('history').split(',')\n\n      historyArray.push(searchKey);\n\n      let uniqueKeywords = Array.from(new Set(historyArray));\n\n      localStorage.setItem('history', uniqueKeywords.join(','))\n    }\n    else {\n      if(searchKey !== '')\n      localStorage.setItem('history', searchKey)\n    }\n    // localStorage.setItem('history', `${history},${searchKey}`);\n  }\n\n  displayMovieDetails = (url) => {\n    fetch(url)\n      .then(data => data.json())\n      .then(result => {\n        if (result.Response === 'True') {\n          this.setState({\n            movies: [],\n            movie: result,\n            movieList: false,\n          })\n        }\n      })\n      .catch(error => console.log(error));\n  }\n\n  render = () => {\n    let history = [];\n    if (localStorage.getItem('history') !== null)\n      history = localStorage.getItem('history').split(',');\n    if (localStorage.getItem('username'))\n      return (\n        <div className=\"container\">\n          <Navbar logout={this.logout} />\n          <Searchbar search={this.search} searchHistory={history} />\n          {\n            this.state.movieList ?\n              <MoviesGrid movies={this.state.movies} results={this.state.result} searchKey={this.state.searchKey} displayMovieDetails={this.displayMovieDetails} /> :\n              <Movie movie={this.state.movie} />\n          }\n          <Footer />\n        </div>\n      );\n    else\n      return (\n        <div className=\"container\">\n          <Navbar />\n          <Login />\n          <Footer />\n        </div>\n      );\n  }\n\n}\n\nexport default MovieApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MovieApp from './MovieApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MovieApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}